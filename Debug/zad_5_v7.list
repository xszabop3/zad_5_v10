
zad_5_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017f4  080017f4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080017f4  080017f4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f4  080017f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080017fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001800  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001800  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b88  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f83  00000000  00000000  00023bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000570  00000000  00000000  00024b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e8  00000000  00000000  000250b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f46  00000000  00000000  00025598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000357b  00000000  00000000  0003a4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f9ec  00000000  00000000  0003da59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001570  00000000  00000000  000ad4c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017c4 	.word	0x080017c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080017c4 	.word	0x080017c4

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	; (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <LL_RCC_HSI_Enable+0x1c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <LL_RCC_HSI_Enable+0x1c>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_RCC_HSI_IsReady+0x20>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b02      	cmp	r3, #2
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000

08000368 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4904      	ldr	r1, [pc, #16]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800037e:	4313      	orrs	r3, r2
 8000380:	600b      	str	r3, [r1, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f023 0203 	bic.w	r2, r3, #3
 80003a4:	4904      	ldr	r1, [pc, #16]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	604b      	str	r3, [r1, #4]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_RCC_GetSysClkSource+0x18>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f003 030c 	and.w	r3, r3, #12
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_RCC_SetAHBPrescaler+0x24>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003e8:	4904      	ldr	r1, [pc, #16]	; (80003fc <LL_RCC_SetAHBPrescaler+0x24>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	604b      	str	r3, [r1, #4]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x24>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	604b      	str	r3, [r1, #4]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000438:	4904      	ldr	r1, [pc, #16]	; (800044c <LL_RCC_SetAPB2Prescaler+0x24>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4313      	orrs	r3, r2
 800043e:	604b      	str	r3, [r1, #4]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000

08000450 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000

08000480 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	4907      	ldr	r1, [pc, #28]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000496:	69da      	ldr	r2, [r3, #28]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	4907      	ldr	r1, [pc, #28]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80004ea:	4a13      	ldr	r2, [pc, #76]	; (8000538 <LL_SYSCFG_SetEXTISource+0x58>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3302      	adds	r3, #2
 80004f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	0c1b      	lsrs	r3, r3, #16
 80004fa:	43db      	mvns	r3, r3
 80004fc:	ea02 0103 	and.w	r1, r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	fa93 f3a3 	rbit	r3, r3
 800050c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	fab3 f383 	clz	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	fa03 f202 	lsl.w	r2, r3, r2
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <LL_SYSCFG_SetEXTISource+0x58>)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	430a      	orrs	r2, r1
 8000526:	3302      	adds	r3, #2
 8000528:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40010000 	.word	0x40010000

0800053c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f023 0207 	bic.w	r2, r3, #7
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	600b      	str	r3, [r1, #0]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40022000 	.word	0x40022000

08000564 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_FLASH_GetLatency+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 0307 	and.w	r3, r3, #7
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40022000 	.word	0x40022000

08000580 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f043 0201 	orr.w	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	609a      	str	r2, [r3, #8]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	609a      	str	r2, [r3, #8]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b089      	sub	sp, #36	; 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	fa93 f3a3 	rbit	r3, r3
 8000606:	613b      	str	r3, [r7, #16]
  return result;
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	fab3 f383 	clz	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	2103      	movs	r1, #3
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	43db      	mvns	r3, r3
 800061a:	401a      	ands	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	61bb      	str	r3, [r7, #24]
  return result;
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	431a      	orrs	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800064a:	b480      	push	{r7}
 800064c:	b089      	sub	sp, #36	; 0x24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	fa93 f3a3 	rbit	r3, r3
 8000664:	613b      	str	r3, [r7, #16]
  return result;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	fab3 f383 	clz	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	401a      	ands	r2, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	fa93 f3a3 	rbit	r3, r3
 8000684:	61bb      	str	r3, [r7, #24]
  return result;
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	431a      	orrs	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60da      	str	r2, [r3, #12]
}
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint16_t cnt=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	80fb      	strh	r3, [r7, #6]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff feee 	bl	80004b0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006d8:	f7ff fed2 	bl	8000480 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f7ff fd73 	bl	80001c8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f837 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f8bb 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f865 	bl	80007b8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mode & 1)
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <main+0x88>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <main+0x2a>
	  {
		  cnt=checkButtonState(gpio_push_button_GPIO_Port, gpio_push_button_Pin, BUTTON_EXTI_TRIGGER, BUTTON_EXTI_SAMPLES_WINDOW, BUTTON_EXTI_SAMPLES_REQUIRED);
 80006fa:	230a      	movs	r3, #10
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	230f      	movs	r3, #15
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 f914 	bl	8000934 <checkButtonState>
 800070c:	4603      	mov	r3, r0
 800070e:	80fb      	strh	r3, [r7, #6]
		  if(cnt )
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d012      	beq.n	800073c <main+0x78>
		  	 {if ((gpio_led_GPIO_Port->ODR) & gpio_led_Pin)
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <main+0x8c>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <main+0x6c>
		  	  {gpio_led_GPIO_Port->ODR &= ~(gpio_led_Pin);}
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <main+0x8c>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <main+0x8c>)
 8000728:	f023 0308 	bic.w	r3, r3, #8
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	e005      	b.n	800073c <main+0x78>
		  	  else
		  	  {gpio_led_GPIO_Port->ODR |= gpio_led_Pin;}
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <main+0x8c>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <main+0x8c>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6153      	str	r3, [r2, #20]
		  }
		  mode &=~( 1 );
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <main+0x88>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b01      	ldr	r3, [pc, #4]	; (800074c <main+0x88>)
 8000748:	701a      	strb	r2, [r3, #0]
	  if (mode & 1)
 800074a:	e7d0      	b.n	80006ee <main+0x2a>
 800074c:	20000020 	.word	0x20000020
 8000750:	48000400 	.word	0x48000400

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff feef 	bl	800053c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800075e:	bf00      	nop
 8000760:	f7ff ff00 	bl	8000564 <LL_FLASH_GetLatency>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1fa      	bne.n	8000760 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800076a:	f7ff fddb 	bl	8000324 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800076e:	bf00      	nop
 8000770:	f7ff fde8 	bl	8000344 <LL_RCC_HSI_IsReady>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d1fa      	bne.n	8000770 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800077a:	2010      	movs	r0, #16
 800077c:	f7ff fdf4 	bl	8000368 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fe29 	bl	80003d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fe3a 	bl	8000400 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe4b 	bl	8000428 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fdfe 	bl	8000394 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000798:	bf00      	nop
 800079a:	f7ff fe0f 	bl	80003bc <LL_RCC_GetSysClkSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1fa      	bne.n	800079a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <SystemClock_Config+0x60>)
 80007a6:	f000 ffcb 	bl	8001740 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <SystemClock_Config+0x60>)
 80007ac:	f000 ffd6 	bl	800175c <LL_SetSystemCoreClock>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	007a1200 	.word	0x007a1200

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80007e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007e6:	f7ff fe4b 	bl	8000480 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007ee:	f7ff fe2f 	bl	8000450 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80007f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000808:	2307      	movs	r3, #7
 800080a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fc91 	bl	800113a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000818:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800081c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800082a:	230c      	movs	r3, #12
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_USART2_UART_Init+0xa4>)
 800083e:	f000 fef9 	bl	8001634 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_USART2_UART_Init+0xa4>)
 8000844:	f7ff fec2 	bl	80005cc <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_USART2_UART_Init+0xa4>)
 800084a:	f7ff fea9 	bl	80005a0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_USART2_UART_Init+0xa4>)
 8000850:	f7ff fe96 	bl	8000580 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3738      	adds	r7, #56	; 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000882:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000886:	f7ff fde3 	bl	8000450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800088a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800088e:	f7ff fddf 	bl	8000450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000892:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000896:	f7ff fddb 	bl	8000450 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(gpio_led_GPIO_Port, gpio_led_Pin);
 800089a:	2108      	movs	r1, #8
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <MX_GPIO_Init+0xd0>)
 800089e:	f7ff ff03 	bl	80006a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 80008a2:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe1a 	bl	80004e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(gpio_push_button_GPIO_Port, gpio_push_button_Pin, LL_GPIO_PULL_UP);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2108      	movs	r1, #8
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f7ff fec9 	bl	800064a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(gpio_push_button_GPIO_Port, gpio_push_button_Pin, LL_GPIO_MODE_INPUT);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2108      	movs	r1, #8
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f7ff fe94 	bl	80005ec <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80008c4:	2308      	movs	r3, #8
 80008c6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if(BUTTON_EXTI_TRIGGER)
  {EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;}
 80008d8:	2302      	movs	r3, #2
 80008da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  else
  {EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;}
  LL_EXTI_Init(&EXTI_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fa3c 	bl	8000d60 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = gpio_led_Pin;
 80008e8:	2308      	movs	r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(gpio_led_GPIO_Port, &GPIO_InitStruct);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000902:	f000 fc1a 	bl	800113a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000906:	f7ff fc83 	bl	8000210 <__NVIC_GetPriorityGrouping>
 800090a:	4603      	mov	r3, r0
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fcd3 	bl	80002bc <NVIC_EncodePriority>
 8000916:	4603      	mov	r3, r0
 8000918:	4619      	mov	r1, r3
 800091a:	2009      	movs	r0, #9
 800091c:	f7ff fca4 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000920:	2009      	movs	r0, #9
 8000922:	f7ff fc83 	bl	800022c <__NVIC_EnableIRQ>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	48000400 	.word	0x48000400

08000934 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint16_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	4608      	mov	r0, r1
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	4603      	mov	r3, r0
 8000944:	807b      	strh	r3, [r7, #2]
 8000946:	460b      	mov	r3, r1
 8000948:	707b      	strb	r3, [r7, #1]
 800094a:	4613      	mov	r3, r2
 800094c:	703b      	strb	r3, [r7, #0]
	  //type your code for "checkButtonState" implementation here:
	uint8_t num_of_samples,good_states=0;
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]
	uint32_t state;
	for (num_of_samples=0;num_of_samples<samples_window;num_of_samples++){
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e01c      	b.n	8000992 <checkButtonState+0x5e>
		state= PORT->IDR & ( PIN);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	4013      	ands	r3, r2
 8000960:	60bb      	str	r3, [r7, #8]
		if ( ( ( state > 0 ) && ( edge==TRIGGER_RISE ) ) || ( ( state==0x0 ) && ( edge==TRIGGER_FALL ) ) )
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <checkButtonState+0x3a>
 8000968:	787b      	ldrb	r3, [r7, #1]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d005      	beq.n	800097a <checkButtonState+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10b      	bne.n	800098c <checkButtonState+0x58>
 8000974:	787b      	ldrb	r3, [r7, #1]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d108      	bne.n	800098c <checkButtonState+0x58>
			{good_states++;
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
			if (good_states >= samples_required)
 8000980:	7bba      	ldrb	r2, [r7, #14]
 8000982:	7e3b      	ldrb	r3, [r7, #24]
 8000984:	429a      	cmp	r2, r3
 8000986:	d301      	bcc.n	800098c <checkButtonState+0x58>
				return (0xff);
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	e007      	b.n	800099c <checkButtonState+0x68>
	for (num_of_samples=0;num_of_samples<samples_window;num_of_samples++){
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3301      	adds	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	7bfa      	ldrb	r2, [r7, #15]
 8000994:	783b      	ldrb	r3, [r7, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3de      	bcc.n	8000958 <checkButtonState+0x24>
			}

		}
	return (0);
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4013      	ands	r3, r2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40010400 	.word	0x40010400

080009d4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6153      	str	r3, [r2, #20]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40010400 	.word	0x40010400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	mode |=0x1;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <EXTI3_IRQHandler+0x28>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <EXTI3_IRQHandler+0x28>)
 8000a64:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000a66:	2008      	movs	r0, #8
 8000a68:	f7ff ff9e 	bl	80009a8 <LL_EXTI_IsActiveFlag_0_31>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <EXTI3_IRQHandler+0x24>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8000a72:	2008      	movs	r0, #8
 8000a74:	f7ff ffae 	bl	80009d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000020 	.word	0x20000020

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x28>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x28>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x28>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ab0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <LoopForever+0xa>)
	ldr	r3, =_edata
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ac2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ad2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffd3 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f000 fe4f 	bl	800177c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fdf1 	bl	80006c4 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000ae8:	080017fc 	.word	0x080017fc
	ldr	r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000af0:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000af4:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000af8:	20000024 	.word	0x20000024

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <LL_EXTI_EnableIT_0_31>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_EXTI_EnableIT_0_31+0x20>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4904      	ldr	r1, [pc, #16]	; (8000b20 <LL_EXTI_EnableIT_0_31+0x20>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <LL_EXTI_EnableIT_32_63>:
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b2e:	6a1a      	ldr	r2, [r3, #32]
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	620b      	str	r3, [r1, #32]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40010400 	.word	0x40010400

08000b48 <LL_EXTI_DisableIT_0_31>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4904      	ldr	r1, [pc, #16]	; (8000b6c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400

08000b70 <LL_EXTI_DisableIT_32_63>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b7a:	6a1a      	ldr	r2, [r3, #32]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4904      	ldr	r1, [pc, #16]	; (8000b94 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	620b      	str	r3, [r1, #32]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40010400 	.word	0x40010400

08000b98 <LL_EXTI_EnableEvent_0_31>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40010400 	.word	0x40010400

08000bbc <LL_EXTI_EnableEvent_32_63>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <LL_EXTI_EnableEvent_32_63+0x20>)
 8000bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <LL_EXTI_EnableEvent_32_63+0x20>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40010400 	.word	0x40010400

08000be0 <LL_EXTI_DisableEvent_0_31>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	604b      	str	r3, [r1, #4]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400

08000c08 <LL_EXTI_DisableEvent_32_63>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40010400 	.word	0x40010400

08000c30 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	608b      	str	r3, [r1, #8]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40010400 	.word	0x40010400

08000c54 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40010400 	.word	0x40010400

08000c78 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4904      	ldr	r1, [pc, #16]	; (8000c9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	608b      	str	r3, [r1, #8]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4904      	ldr	r1, [pc, #16]	; (8000cc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60cb      	str	r3, [r1, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40010400 	.word	0x40010400

08000cec <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40010400 	.word	0x40010400

08000d10 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	60cb      	str	r3, [r1, #12]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010400 	.word	0x40010400

08000d38 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	4904      	ldr	r1, [pc, #16]	; (8000d5c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40010400 	.word	0x40010400

08000d60 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7a1b      	ldrb	r3, [r3, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80c2 	beq.w	8000efa <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d05b      	beq.n	8000e36 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7a5b      	ldrb	r3, [r3, #9]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d00e      	beq.n	8000da4 <LL_EXTI_Init+0x44>
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d017      	beq.n	8000dba <LL_EXTI_Init+0x5a>
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d120      	bne.n	8000dd0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff24 	bl	8000be0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff feaf 	bl	8000b00 <LL_EXTI_EnableIT_0_31>
          break;
 8000da2:	e018      	b.n	8000dd6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fecd 	bl	8000b48 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fef0 	bl	8000b98 <LL_EXTI_EnableEvent_0_31>
          break;
 8000db8:	e00d      	b.n	8000dd6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fe9e 	bl	8000b00 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fee5 	bl	8000b98 <LL_EXTI_EnableEvent_0_31>
          break;
 8000dce:	e002      	b.n	8000dd6 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8000dd4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7a9b      	ldrb	r3, [r3, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d02b      	beq.n	8000e36 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a9b      	ldrb	r3, [r3, #10]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d00e      	beq.n	8000e04 <LL_EXTI_Init+0xa4>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <LL_EXTI_Init+0xba>
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d120      	bne.n	8000e30 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff8c 	bl	8000d10 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff17 	bl	8000c30 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000e02:	e019      	b.n	8000e38 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff35 	bl	8000c78 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff58 	bl	8000cc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e18:	e00e      	b.n	8000e38 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff06 	bl	8000c30 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff4d 	bl	8000cc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e2e:	e003      	b.n	8000e38 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
            break;
 8000e34:	e000      	b.n	8000e38 <LL_EXTI_Init+0xd8>
        }
      }
 8000e36:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d071      	beq.n	8000f24 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7a5b      	ldrb	r3, [r3, #9]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00e      	beq.n	8000e66 <LL_EXTI_Init+0x106>
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d017      	beq.n	8000e7c <LL_EXTI_Init+0x11c>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d120      	bne.n	8000e92 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fed7 	bl	8000c08 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe60 	bl	8000b24 <LL_EXTI_EnableIT_32_63>
          break;
 8000e64:	e018      	b.n	8000e98 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe80 	bl	8000b70 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fea1 	bl	8000bbc <LL_EXTI_EnableEvent_32_63>
          break;
 8000e7a:	e00d      	b.n	8000e98 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe4f 	bl	8000b24 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fe96 	bl	8000bbc <LL_EXTI_EnableEvent_32_63>
          break;
 8000e90:	e002      	b.n	8000e98 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
          break;
 8000e96:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7a9b      	ldrb	r3, [r3, #10]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d041      	beq.n	8000f24 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7a9b      	ldrb	r3, [r3, #10]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d00e      	beq.n	8000ec6 <LL_EXTI_Init+0x166>
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <LL_EXTI_Init+0x17c>
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d120      	bne.n	8000ef2 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff3f 	bl	8000d38 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fec8 	bl	8000c54 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000ec4:	e02f      	b.n	8000f26 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fee8 	bl	8000ca0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff09 	bl	8000cec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000eda:	e024      	b.n	8000f26 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff feb7 	bl	8000c54 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fefe 	bl	8000cec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ef0:	e019      	b.n	8000f26 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
            break;
 8000ef6:	bf00      	nop
 8000ef8:	e015      	b.n	8000f26 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe22 	bl	8000b48 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe69 	bl	8000be0 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe2c 	bl	8000b70 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe73 	bl	8000c08 <LL_EXTI_DisableEvent_32_63>
 8000f22:	e000      	b.n	8000f26 <LL_EXTI_Init+0x1c6>
      }
 8000f24:	bf00      	nop
#endif
  }
  return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LL_GPIO_SetPinMode>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	613b      	str	r3, [r7, #16]
  return result;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2103      	movs	r1, #3
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	61bb      	str	r3, [r7, #24]
  return result;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fab3 f383 	clz	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_GPIO_SetPinOutputType>:
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	431a      	orrs	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	605a      	str	r2, [r3, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_GPIO_SetPinSpeed>:
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b089      	sub	sp, #36	; 0x24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	613b      	str	r3, [r7, #16]
  return result;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	61bb      	str	r3, [r7, #24]
  return result;
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	609a      	str	r2, [r3, #8]
}
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_GPIO_SetPinPull>:
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	613b      	str	r3, [r7, #16]
  return result;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2103      	movs	r1, #3
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	401a      	ands	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	61bb      	str	r3, [r7, #24]
  return result;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	60da      	str	r2, [r3, #12]
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_GPIO_SetAFPin_0_7>:
{
 800107a:	b480      	push	{r7}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	613b      	str	r3, [r7, #16]
  return result;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	210f      	movs	r1, #15
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	61bb      	str	r3, [r7, #24]
  return result;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	621a      	str	r2, [r3, #32]
}
 80010cc:	bf00      	nop
 80010ce:	3724      	adds	r7, #36	; 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_GPIO_SetAFPin_8_15>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	613b      	str	r3, [r7, #16]
  return result;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	210f      	movs	r1, #15
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	61bb      	str	r3, [r7, #24]
  return result;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	431a      	orrs	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b088      	sub	sp, #32
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	613b      	str	r3, [r7, #16]
  return result;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800115c:	e051      	b.n	8001202 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d043      	beq.n	80011fc <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d003      	beq.n	8001184 <LL_GPIO_Init+0x4a>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10e      	bne.n	80011a2 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff16 	bl	8000fbe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	461a      	mov	r2, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fef6 	bl	8000f8e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	461a      	mov	r2, r3
 80011a8:	69b9      	ldr	r1, [r7, #24]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff36 	bl	800101c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d11a      	bne.n	80011ee <LL_GPIO_Init+0xb4>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	60bb      	str	r3, [r7, #8]
  return result;
 80011c4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d807      	bhi.n	80011e0 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	461a      	mov	r2, r3
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff4e 	bl	800107a <LL_GPIO_SetAFPin_0_7>
 80011de:	e006      	b.n	80011ee <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	461a      	mov	r2, r3
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff75 	bl	80010d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe9a 	bl	8000f30 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3301      	adds	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1a6      	bne.n	800115e <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <LL_RCC_HSI_IsReady>:
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <LL_RCC_HSI_IsReady+0x20>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b02      	cmp	r3, #2
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000

08001240 <LL_RCC_LSE_IsReady>:
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <LL_RCC_LSE_IsReady+0x20>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <LL_RCC_GetSysClkSource>:
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <LL_RCC_GetSysClkSource+0x18>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <LL_RCC_GetAHBPrescaler+0x18>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <LL_RCC_GetUSARTClockSource+0x28>)
 80012de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e0:	2103      	movs	r1, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	4313      	orrs	r3, r2
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <LL_RCC_PLL_GetMainSource+0x18>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <LL_RCC_PLL_GetPrediv+0x18>)
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	f003 030f 	and.w	r3, r3, #15
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800135c:	f000 f860 	bl	8001420 <RCC_GetSystemClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f87a 	bl	8001464 <RCC_GetHCLKClockFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f888 	bl	8001490 <RCC_GetPCLK1ClockFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f894 	bl	80014b8 <RCC_GetPCLK2ClockFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60da      	str	r2, [r3, #12]
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d12a      	bne.n	8001408 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff8e 	bl	80012d4 <LL_RCC_GetUSARTClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d00f      	beq.n	80013de <LL_RCC_GetUSARTClockFreq+0x3e>
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d005      	beq.n	80013ce <LL_RCC_GetUSARTClockFreq+0x2e>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d114      	bne.n	80013f0 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80013c6:	f000 f82b 	bl	8001420 <RCC_GetSystemClockFreq>
 80013ca:	60f8      	str	r0, [r7, #12]
        break;
 80013cc:	e021      	b.n	8001412 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80013ce:	f7ff ff25 	bl	800121c <LL_RCC_HSI_IsReady>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d019      	beq.n	800140c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <LL_RCC_GetUSARTClockFreq+0x7c>)
 80013da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80013dc:	e016      	b.n	800140c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80013de:	f7ff ff2f 	bl	8001240 <LL_RCC_LSE_IsReady>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80013e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80013ee:	e00f      	b.n	8001410 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80013f0:	f000 f816 	bl	8001420 <RCC_GetSystemClockFreq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f834 	bl	8001464 <RCC_GetHCLKClockFreq>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f846 	bl	8001490 <RCC_GetPCLK1ClockFreq>
 8001404:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001406:	e004      	b.n	8001412 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001408:	bf00      	nop
 800140a:	e002      	b.n	8001412 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001410:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	007a1200 	.word	0x007a1200

08001420 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800142a:	f7ff ff1b 	bl	8001264 <LL_RCC_GetSysClkSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b04      	cmp	r3, #4
 8001432:	d006      	beq.n	8001442 <RCC_GetSystemClockFreq+0x22>
 8001434:	2b08      	cmp	r3, #8
 8001436:	d007      	beq.n	8001448 <RCC_GetSystemClockFreq+0x28>
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <RCC_GetSystemClockFreq+0x40>)
 800143e:	607b      	str	r3, [r7, #4]
      break;
 8001440:	e009      	b.n	8001456 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <RCC_GetSystemClockFreq+0x40>)
 8001444:	607b      	str	r3, [r7, #4]
      break;
 8001446:	e006      	b.n	8001456 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001448:	f000 f84a 	bl	80014e0 <RCC_PLL_GetFreqDomain_SYS>
 800144c:	6078      	str	r0, [r7, #4]
      break;
 800144e:	e002      	b.n	8001456 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <RCC_GetSystemClockFreq+0x40>)
 8001452:	607b      	str	r3, [r7, #4]
      break;
 8001454:	bf00      	nop
  }

  return frequency;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	007a1200 	.word	0x007a1200

08001464 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800146c:	f7ff ff08 	bl	8001280 <LL_RCC_GetAHBPrescaler>
 8001470:	4603      	mov	r3, r0
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <RCC_GetHCLKClockFreq+0x28>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	40d3      	lsrs	r3, r2
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	080017dc 	.word	0x080017dc

08001490 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001498:	f7ff ff00 	bl	800129c <LL_RCC_GetAPB1Prescaler>
 800149c:	4603      	mov	r3, r0
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	40d3      	lsrs	r3, r2
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	080017ec 	.word	0x080017ec

080014b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80014c0:	f7ff fefa 	bl	80012b8 <LL_RCC_GetAPB2Prescaler>
 80014c4:	4603      	mov	r3, r0
 80014c6:	0adb      	lsrs	r3, r3, #11
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <RCC_GetPCLK2ClockFreq+0x24>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	40d3      	lsrs	r3, r2
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	080017ec 	.word	0x080017ec

080014e0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80014ee:	f7ff ff07 	bl	8001300 <LL_RCC_PLL_GetMainSource>
 80014f2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fe:	d003      	beq.n	8001508 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001500:	e005      	b.n	800150e <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001504:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001506:	e005      	b.n	8001514 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800150a:	60fb      	str	r3, [r7, #12]
      break;
 800150c:	e002      	b.n	8001514 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001510:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001512:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001514:	f7ff ff10 	bl	8001338 <LL_RCC_PLL_GetPrediv>
 8001518:	4603      	mov	r3, r0
 800151a:	3301      	adds	r3, #1
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001522:	f7ff fefb 	bl	800131c <LL_RCC_PLL_GetMultiplicator>
 8001526:	4603      	mov	r3, r0
 8001528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800152c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001530:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	fa92 f2a2 	rbit	r2, r2
 8001538:	603a      	str	r2, [r7, #0]
  return result;
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	40d3      	lsrs	r3, r2
 8001544:	3302      	adds	r3, #2
 8001546:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	003d0900 	.word	0x003d0900
 8001558:	007a1200 	.word	0x007a1200

0800155c <LL_USART_IsEnabled>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <LL_USART_IsEnabled+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_USART_IsEnabled+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_USART_SetStopBitsLength>:
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_USART_SetHWFlowCtrl>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_USART_SetBaudRate>:
{
 80015ce:	b490      	push	{r4, r7}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e2:	d116      	bne.n	8001612 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	005a      	lsls	r2, r3, #1
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	441a      	add	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80015fe:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	60dc      	str	r4, [r3, #12]
}
 8001610:	e00a      	b.n	8001628 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	085a      	lsrs	r2, r3, #1
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	441a      	add	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bc90      	pop	{r4, r7}
 8001630:	4770      	bx	lr
	...

08001634 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff88 	bl	800155c <LL_USART_IsEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d14e      	bne.n	80016f0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <LL_USART_Init+0xc8>)
 8001658:	4013      	ands	r3, r2
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	6851      	ldr	r1, [r2, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	68d2      	ldr	r2, [r2, #12]
 8001662:	4311      	orrs	r1, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6912      	ldr	r2, [r2, #16]
 8001668:	4311      	orrs	r1, r2
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6992      	ldr	r2, [r2, #24]
 800166e:	430a      	orrs	r2, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff80 	bl	8001582 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff8d 	bl	80015a8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <LL_USART_Init+0xcc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d104      	bne.n	80016a0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fe82 	bl	80013a0 <LL_RCC_GetUSARTClockFreq>
 800169c:	61b8      	str	r0, [r7, #24]
 800169e:	e016      	b.n	80016ce <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <LL_USART_Init+0xd0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d107      	bne.n	80016b8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe51 	bl	8001354 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	e00a      	b.n	80016ce <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <LL_USART_Init+0xd4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d106      	bne.n	80016ce <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fe45 	bl	8001354 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00d      	beq.n	80016f0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80016dc:	2300      	movs	r3, #0
 80016de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69b9      	ldr	r1, [r7, #24]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff6f 	bl	80015ce <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	efff69f3 	.word	0xefff69f3
 8001700:	40013800 	.word	0x40013800
 8001704:	40004400 	.word	0x40004400
 8001708:	40004800 	.word	0x40004800

0800170c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <LL_InitTick+0x30>)
 8001720:	3b01      	subs	r3, #1
 8001722:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_InitTick+0x30>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <LL_InitTick+0x30>)
 800172c:	2205      	movs	r2, #5
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e010 	.word	0xe000e010

08001740 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffdd 	bl	800170c <LL_InitTick>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LL_SetSystemCoreClock+0x1c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000000 	.word	0x20000000

0800177c <__libc_init_array>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4e0d      	ldr	r6, [pc, #52]	; (80017b4 <__libc_init_array+0x38>)
 8001780:	4c0d      	ldr	r4, [pc, #52]	; (80017b8 <__libc_init_array+0x3c>)
 8001782:	1ba4      	subs	r4, r4, r6
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	2500      	movs	r5, #0
 8001788:	42a5      	cmp	r5, r4
 800178a:	d109      	bne.n	80017a0 <__libc_init_array+0x24>
 800178c:	4e0b      	ldr	r6, [pc, #44]	; (80017bc <__libc_init_array+0x40>)
 800178e:	4c0c      	ldr	r4, [pc, #48]	; (80017c0 <__libc_init_array+0x44>)
 8001790:	f000 f818 	bl	80017c4 <_init>
 8001794:	1ba4      	subs	r4, r4, r6
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	2500      	movs	r5, #0
 800179a:	42a5      	cmp	r5, r4
 800179c:	d105      	bne.n	80017aa <__libc_init_array+0x2e>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017a4:	4798      	blx	r3
 80017a6:	3501      	adds	r5, #1
 80017a8:	e7ee      	b.n	8001788 <__libc_init_array+0xc>
 80017aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ae:	4798      	blx	r3
 80017b0:	3501      	adds	r5, #1
 80017b2:	e7f2      	b.n	800179a <__libc_init_array+0x1e>
 80017b4:	080017f4 	.word	0x080017f4
 80017b8:	080017f4 	.word	0x080017f4
 80017bc:	080017f4 	.word	0x080017f4
 80017c0:	080017f8 	.word	0x080017f8

080017c4 <_init>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr

080017d0 <_fini>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr
